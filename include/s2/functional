
template<class R, class... ArgTypes> class function<R(ArgTypes...)>;
template<class R, class... ArgTypes> void swap(function<R(ArgTypes...)>&, function<R(ArgTypes...)>&);
template<class R, class... ArgTypes> bool operator==(const function<R(ArgTypes...)>&, nullptr_t) noexcept;
template<class R, class... ArgTypes> bool operator==(nullptr_t, const function<R(ArgTypes...)>&) noexcept;
template<class R, class... ArgTypes> bool operator!=(const function<R(ArgTypes...)>&, nullptr_t) noexcept;
template<class R, class... ArgTypes> bool operator!=(nullptr_t, const function<R(ArgTypes...)>&) noexcept;

namespace s2 {
  class bad_function_call : public exception {
  public:
    bad_function_call() noexcept {}
  };

  template<typename> class function;
  // undefined
  template<typename R, typename... ArgTypes>
  class function<R(ArgTypes...)> {
    class IStorage {
    public:
      virtual ~IStorage();
      virtual R invoke(Args&&... args) = 0;
      virtual void moveTo(IStorage* storage) = 0;
    };
    template <typename T>
    class storage {
      T t;
      R invoke(Args&&... args) {
        return t(std::forward<Args>(args)...);
      }
    };
  public:
    using result_type = R;
    function() noexcept;
    function(nullptr_t) noexcept;
    function(const function&);
    function(function&&);
    template<class F> function(F);
    function& operator=(const function&);
    function& operator=(function&&);
    function& operator=(nullptr_t) noexcept;
    template<class F> function& operator=(F&&);
    template<class F> function& operator=(reference_wrapper<F>) noexcept;
    function();
    void swap(function&) noexcept;
    explicit operator bool() const noexcept;
    R operator()(ArgTypes...) const;
    const type_info& target_type() const noexcept;
    template<class T>       T* target() noexcept;
    template<class T> const T* target() const noexcept;
  };
  // 20.14.12.2.6, Null pointer comparisons:
  template <class R, class... ArgTypes>
  bool operator==(const function<R(ArgTypes...)>&, nullptr_t) noexcept;
  template <class R, class... ArgTypes>
  bool operator==(nullptr_t, const function<R(ArgTypes...)>&) noexcept;
  template <class R, class... ArgTypes>
  bool operator!=(const function<R(ArgTypes...)>&, nullptr_t) noexcept;
  template <class R, class... ArgTypes>
  bool operator!=(nullptr_t, const function<R(ArgTypes...)>&) noexcept;
  // 20.14.12.2.7, specialized algorithms:
  template <class R, class... ArgTypes>
  void swap(function<R(ArgTypes...)>&, function<R(ArgTypes...)>&);
}
